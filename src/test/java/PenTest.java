import org.testng.Assert;
import org.testng.TestNG;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Paths;


import static org.testng.Assert.*;

public class PenTest {
   private Pen testClassObject;

    @AfterMethod
    public void tearDown() {
        testClassObject=null;
    }


   /*Этот метод сравнивает приватные переменные экземпляра объектов Pen на равенство, получая доступ к ним с помощью рефлексии. Если они
    равны то возвращает true, иначе false.
      */
    private static boolean comparedObjectsPenClass(Pen testClassObject, Pen expectedClassObject) {
            boolean bool=true;
        try {
            Field fldInkContainerValue = testClassObject.getClass().getDeclaredField(DataForUninTests.TEST_INK_CONTAINER_VALUE_WRITE);
            Field fldSizeLetter = testClassObject.getClass().getDeclaredField(DataForUninTests.TEST_SIZE_LETTER_WRITE);
            Field fldColor = testClassObject.getClass().getDeclaredField(DataForUninTests.TEST_COLOR_WRITE);
            fldInkContainerValue.setAccessible(true);
            fldSizeLetter.setAccessible(true);
            fldColor.setAccessible(true);
            int fldInkContainerValue1 = (Integer) fldInkContainerValue.get(testClassObject);
            double fldSizeLetter1 = (Double) fldSizeLetter.get(testClassObject);
            String fldColor1 = (String) fldColor.get(testClassObject);
            Field fldExpectedInkContainerValue = expectedClassObject.getClass().getDeclaredField(DataForUninTests.TEST_INK_CONTAINER_VALUE_WRITE);
            Field fldExpectedSizeLetter = expectedClassObject.getClass().getDeclaredField(DataForUninTests.TEST_SIZE_LETTER_WRITE);
            Field fldExpectedColor = expectedClassObject.getClass().getDeclaredField(DataForUninTests.TEST_COLOR_WRITE);
            fldExpectedInkContainerValue.setAccessible(true);
            fldExpectedSizeLetter.setAccessible(true);
            fldExpectedColor.setAccessible(true);
            int fldExpectedInkContainerValue1 = (Integer) fldInkContainerValue.get(expectedClassObject);
            double fldExpectedSizeLetter1 = (Double) fldSizeLetter.get(expectedClassObject);
            String fldExpectedColor1 = (String) fldColor.get(expectedClassObject);
            if((fldInkContainerValue1==fldExpectedInkContainerValue1)&&(fldSizeLetter1==fldExpectedSizeLetter1)&&
                    (fldColor1==fldExpectedColor1)) bool = true;
                else bool = false;
        } catch (IllegalAccessException e) {
            System.out.println("Незаконный доступ к переменной");
            e.printStackTrace();
        } catch (NoSuchFieldException e) {
            System.out.println("Переменная экземпляра в тестируемом класе Pen отсутствует");
            e.printStackTrace();
        }
        return bool;
    }



    /*Метод создает новый ожидаемый объект класса Pen, и инициализирует его переменные экземпляра с помощью рефлексии для проверки*/
    private static Pen newObjectPenClassForInspection(int testInkContainerValue, double testSizeLetter, String testColor) {
        Pen testClassObjectForReflection=new Pen(testInkContainerValue);
        try {
            Field fldInkContainerValue = testClassObjectForReflection.getClass().getDeclaredField(DataForUninTests.TEST_INK_CONTAINER_VALUE_WRITE);
            Field fldSizeLetter = testClassObjectForReflection.getClass().getDeclaredField(DataForUninTests.TEST_SIZE_LETTER_WRITE);
            Field fldColor = testClassObjectForReflection.getClass().getDeclaredField(DataForUninTests.TEST_COLOR_WRITE);
            fldInkContainerValue.setAccessible(true);
            fldSizeLetter.setAccessible(true);
            fldColor.setAccessible(true);
            fldInkContainerValue.set(testClassObjectForReflection, (Integer) testInkContainerValue);
            fldSizeLetter.set(testClassObjectForReflection, (Double) testSizeLetter);
            fldColor.set(testClassObjectForReflection, (String) testColor);
        } catch (IllegalAccessException e) {
            System.out.println("Незаконные доступ к переменной");
            e.printStackTrace();
        } catch (NoSuchFieldException e) {
            System.out.println("Переменная экземпляра в тестируемом класе Pen отсутствует");
            e.printStackTrace();
        }
        return testClassObjectForReflection;

    }


    /*Этот тестовый метод проверяет инициализацию переменной экземеляра inkContainerValue конструктором Pen(int inkContainerValue),
    и значение всех перезменных экземпляна (одна вновь инициализированнная, две по умолчанию).
     */
    @Test(dataProvider ="testPenConstructorOneParametrData_EnterOneParameterTwoDefault", dataProviderClass = DataForUninTests.class)
    public void testPenConstructorOneParametr_EnterOneParameterTwoDefault(int testInkContainerValue, double testSizeLetter, String testColor) {
        testClassObject=new Pen(testInkContainerValue);
        Pen expectedClassObject=newObjectPenClassForInspection(testInkContainerValue, testSizeLetter, testColor);
        assertTrue(comparedObjectsPenClass(testClassObject, expectedClassObject));
    }


    /*Этот тестовый метод проверяет инициализацию переменных экземеляра inkContainerValue и sizeLetter конструктором
    Pen(int inkContainerValue, double sizeLetter), и значение всех перезменных экземпляна(две вновь инициализированнные, одна по умолчанию).
    */
    @Test(dataProvider ="testPenConstructorTwoParametrsData_EnterTwoParametersOneDefault", dataProviderClass = DataForUninTests.class)
    public void testPenConstructorTwoParametrs_EnterTwoParametersOneDefault(int testInkContainerValue, double testSizeLetter, String testColor) {
        testClassObject=new Pen(testInkContainerValue, testSizeLetter);
        Pen expectedClassObject=newObjectPenClassForInspection(testInkContainerValue, testSizeLetter, testColor);
        assertTrue(comparedObjectsPenClass(testClassObject, expectedClassObject));
    }


    /*Этот тестовый метод проверяет инициализацию переменных экземеляра inkContainerValue, sizeLetter color конструктором
    public Pen(int inkContainerValue, double sizeLetter, String color), и значение всех перезменных экземпляна(три вновь инициализированные).
    */
    @Test(dataProvider ="testPenConstructorThreeParametrsData_EnterThreeParametersZeroDefault", dataProviderClass = DataForUninTests.class)
    public void testPenConstructorThreeParametrs_EnterThreeParametersZeroDefault(int testInkContainerValue, double testSizeLetter, String testColor) {
        testClassObject=new Pen(testInkContainerValue, testSizeLetter, testColor);
        Pen expectedClassObject=newObjectPenClassForInspection(testInkContainerValue, testSizeLetter, testColor);
        assertTrue(comparedObjectsPenClass(testClassObject, expectedClassObject));
    }



    /*Этот тестовый метод проверяет, вернет ли метод getColor класса Pen, переменную экземпляра Color, которая утсановлена по умолчанию*/
    @Test
    public void testPenGetColor_ParametrColorIsDefault() {
        testClassObject=new Pen(DataForUninTests.TEST_INK_CONTAINER_VALUE_DEFAULT);
        assertEquals(testClassObject.getColor(), DataForUninTests.TEST_COLOR_DEFAULT);
    }

    /*Этот тестовый метод проверяет, вернет ли метод getColor класса Pen, переменную экземпляра Color, которая инициализированна конструктором*/
    @Test(dataProvider ="testPenConstructorThreeParametrsData_EnterThreeParametersZeroDefault", dataProviderClass = DataForUninTests.class)
    public void testPenGetColor_ParametrColorIsConstructorInitialized(int testInkContainerValue, double testSizeLetter, String testColor) {
        testClassObject=new Pen(testInkContainerValue, testSizeLetter, testColor);
        assertEquals(testClassObject.getColor(), testColor);
    }


    /*Тестовый метод для тестирования работы метода isWork() при переменной экзмемпляра inkContainerValue больше нуля. Метод isWork()
    при корректной работе должен возвращать true.
    */
    @Test(dataProvider ="testPenIsWorkData_InkContainerValueMoreZero", dataProviderClass = DataForUninTests.class)
    public void testPenIsWork_inkContainerValueMoreZero(int testInkContainerValue, Boolean expectedMethodIsWorkResult ) {
        testClassObject=new Pen(testInkContainerValue);
        assertEquals(testClassObject.isWork(), expectedMethodIsWorkResult);
    }


    /*Тестовый метод для тестирования работы метода isWork() при переменной экзмемпляра inkContainerValue меньше либо равно нуля. Метод isWork()
   при корректной работе должен возвращать falce.
   */
    @Test(dataProvider ="testPenIsWorkData_InkContainerValueLessOrEqualZero", dataProviderClass = DataForUninTests.class)
    public void testPenIsWork_inkContainerValueLessOrEqualZero(int testInkContainerValue, Boolean expectedMethodIsWorkResult ) {
        testClassObject=new Pen(testInkContainerValue);
        assertEquals(testClassObject.isWork(), expectedMethodIsWorkResult);
    }


    /*Тестовый метод для тестирования метода write() при написании строки, на пробелы которой чернила тратиться не должны. Подбираем
    количество чернил(первый параметре) так, чтобы нам хватило написать всю строку(второй параметр), при размере букв по
    умолчанию(sizeLetter = 1.0) учитывая то, что на пробелы чечернила тратиться не должны
     */
    @Test(dataProvider ="testPenWriteData_WrittenWordsWithoutInkSpaces", dataProviderClass = DataForUninTests.class)
    public void testPenWrite_WrittenWordsWithoutInkSpaces(int testInkContainerValue, String testWords) {
        testClassObject=new Pen(testInkContainerValue);
        String expectedWords=testWords;
        assertEquals(testClassObject.write(testWords), expectedWords);
    }


    /*Тестовый метод для тестирования метода write() при написании строки, когда в ручке изначально нет чернил. Инициализируем количество чернил
     inkContainerValue нулем или отрицательным значением(первый параметр), вводим строку длня написание(второй параметр), и ожидаем пустую
      строку(третий параметр)
    */
    @Test(dataProvider ="testPenWriteData_PenWithoutInk", dataProviderClass = DataForUninTests.class)
    public void testPenWrite_PenWithoutInk(int testInkContainerValue, String testWords, String expectedWords) {
        testClassObject=new Pen(testInkContainerValue);
        assertEquals(testClassObject.write(testWords), expectedWords);
    }


    /*Тестовый метод для тестирования метода write() при написании строки, когда в ручке в процессе написания заканчиваются чернила.
    Инициализируем количество чернил inkContainerValue таким значением(первый параметр), чтобы чернил хватило для написания чести строки(второй
    параметр). Вводим ожидаемый результат работы метода (третий параметр), подсчитав сколько символов, включая пробелы, напишет ручка при
    размере букв по умолчанию(sizeLetter = 1.0)
   */
    @Test(dataProvider ="testPenWriteData_EndInkWhileWriting", dataProviderClass = DataForUninTests.class)
    public void testPenWrite_EndInkWhileWriting(int testInkContainerValue, String testWords, String expectedWords) {
        testClassObject=new Pen(testInkContainerValue);
        assertEquals(testClassObject.write(testWords), expectedWords);
    }


    /*Тестовый метод для тестирования метода write() при написании строки, когда в ручке чернил столько же или больше для того, чтобы написать
     заданную строку при размере букв по умолчанию(sizeLetter = 1.0). Инициализируем количество чернил inkContainerValue(первый параметр)
     значением равным или большим sizeOfWord, вводим строку длня написание(второй параметр), которая должна быть и ожидаемым результатом.
    */
    @Test(dataProvider ="testPenWriteData_InkMoreOrEqualSizeOfWord", dataProviderClass = DataForUninTests.class)
    public void testPenWrite_InkMoreOrEqualSizeOfWord(int testInkContainerValue, String testWords) {
        testClassObject=new Pen(testInkContainerValue);
        String expectedWords=testWords;
        assertEquals(testClassObject.write(testWords), expectedWords);
    }


    /*Тестовый метод для тестирования метода write() при написании строки, cостоящей из одной буквы размера от 1.(01) и 1.9(9). Инициализируем
     количество чернил inkContainerValue еденицей(первый параметр), размер буквы sizeLetter(второй параметр), значением от 1.(01) до 1.9(9), вводим
     строку, стояющую из оюной буквы, и ожидаемый результа написания ручккой этой строки.
    */
    @Test(dataProvider ="testPenWriteData_SizeLetterMoreInkContainerValueOnTenths", dataProviderClass = DataForUninTests.class)
    public void testPenWrite_SizeLetterMoreInkContainerValueOnTenths(int testInkContainerValue, double testSizeLetter, String testWords, String expectedWords ) {
        testClassObject=new Pen(testInkContainerValue, testSizeLetter);
        assertEquals(testClassObject.write(testWords), expectedWords);
    }


     /*Тестовый для тестирования метода write() при написании строки, чтобы с учетом размера букв, количество чернил, необходимых для
    написания этой строки sizeOfWord, было на десятые больше количества чернил в ручке inkContainerValue. Инициализируем
   количество чернил в ручке inkContainerValue(первый параметр), размер символа sizeLetter(второй параметр), вводим
   строку для написания, и ожидаемый результа написания ручккой этой строки.
   */
    @Test(dataProvider ="testPenWriteData_sizeOfWordMoreInkContainerValueOnTenths", dataProviderClass = DataForUninTests.class)
    public void testPenWrite_sizeOfWordMoreInkContainerValueOnTenths(int testInkContainerValue, double testSizeLetter, String testWords, String expectedWords ) {
        testClassObject=new Pen(testInkContainerValue, testSizeLetter);
        assertEquals(testClassObject.write(testWords), expectedWords);
    }


    //Тестовый метод для тестирования вывода метода doSomethingElse()
    @Test(dataProvider ="testPenDoSomethingElseData_EnterColor", dataProviderClass = DataForUninTests.class)
    public void testPenDoSomethingElse_EnterColor(int testInkContainerValue, double testSizeLetter, String testColor, String expectedColor) {
        testClassObject = new Pen(testInkContainerValue, testSizeLetter, testColor);
        try {
            File file = new File(DataForUninTests.TEMP_TXT_PATH); //  создаем файл
            PrintStream ps = new PrintStream(file); // создаем поток вывода в файл
            PrintStream standardOut = System.out; // сохраняем стандартный поток вывода
            System.setOut(ps); // присваиваем файловый поток в качестве основного
            testClassObject.doSomethingElse(); // вызываем метод
            Assert.assertEquals(Files.readAllLines(Paths.get(DataForUninTests.TEMP_TXT_PATH)).get(0), expectedColor); // проверяем что результат в файле равен ожидаемому
            System.setOut(standardOut); // возвращаем метод в исходное состояние
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}